{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>The OneDep Deposition API provides a mechanism for a programatic access to OneDep deposition system.</p> <p>An API is used to provide access.  The low level api is documented on apiary.io.</p> <p>This site provides examples of the API as well as providing a wrapper that is designed to make it easier for the end user to use.  It will also ensure that as changes to the API are introduced, the wrapper will ensure compatibility.</p> <p>Please refer to the Command line and wrapper documentation overview or the wrapper api</p>"},{"location":"cli/","title":"Wrapper and CLI","text":"<p>We provide a wrapper for the API that can be used both as a library and a command line application. The wrapper can be accessed on https://github.com/wwPDB/py-onedep_deposition.</p>"},{"location":"cli/#installation","title":"Installation","text":"<p>The wrapper is available on PyPI and can be installed via pip with</p> <p><code>pip install onedep-deposition</code></p>"},{"location":"cli/#configuration","title":"Configuration","text":"<p>To use the CLI, you need to set your API key either as an environment variable (<code>ONEDEP_API_KEY</code>) or store it in your home folder in a file named <code>onedepapi.jwt</code>. After this you'll be able to use the command line.</p>"},{"location":"cli/#hostname-choice","title":"Hostname choice","text":"<p>The CLI provides an option to specify the host to send requests to. If not specified, it will connect to production OneDep servers.</p> <p>When using the test server, you should provide the <code>-h https://onedep-depui-test.wwpdb.org/deposition</code> option for every command.</p>"},{"location":"cli/#depositions","title":"Depositions","text":""},{"location":"cli/#cli","title":"CLI","text":"<p>When creating a deposition, it's required to provide the experiment type (<code>-t option</code>), email (<code>-e</code>), list of users (<code>-u</code>) and country (<code>-c</code>). EM depositions also require a subtype (<code>-s</code>). Optionally, you can provide an EMDB related entry id for EM/EC depositions (<code>-E</code>) or a BMRB related entry id for NMR depositions (<code>-B</code>).</p> <pre><code>onedep-deposition -h https://onedep-depui-test.wwpdb.org/deposition deposition create -t xray -e wbueno@ebi.ac.uk -u 0000-0002-5109-8728 -c \"United Kingdom\"\n\nonedep-deposition -h https://onedep-depui-test.wwpdb.org/deposition deposition create -t em -s helical -e wbueno@ebi.ac.uk -u 0000-0002-5109-8728 -c \"United Kingdom\"\n</code></pre> <p>To get details for a deposition, run the deposition get command and provide the deposition identifier.</p> <pre><code>onedep-deposition -h https://onedep-depui-test.wwpdb.org/deposition deposition get &lt;dep_id&gt;\n</code></pre> <p>To submit files for processing, you can use:</p> <pre><code>onedep-deposition -h https://onedep-depui-test.wwpdb.org/deposition deposition process &lt;dep_id&gt;\n</code></pre> <p>It's also possible to copy metadata from a related deposition using the <code>--copy-from-id &lt;dep_id&gt;</code> option. You need to provide which metadata will be copied. Check the documentation for supported fields.</p> <pre><code>onedep-deposition -h https://onedep-depui-test.wwpdb.org/deposition deposition process --copy-from-id D_X --copy-all &lt;dep_id&gt;\n</code></pre> <p>The processing progress can be check with the status command:</p> <pre><code>onedep-deposition -h https://onedep-depui-test.wwpdb.org/deposition deposition status &lt;dep_id&gt;\n</code></pre>"},{"location":"cli/#api","title":"API","text":"<p>It's possible to call the underlying API from a third-party code to create depositions. Example:</p> <pre><code>from onedep_deposition.deposit_api import DepositApi\n\napi = DepositApi(hostname=\"&lt;server_hostname&gt;\", api_key=\"&lt;key&gt;\")\ndeposition = api.create_xray_deposition(email, users, country, password)\n</code></pre> <p>Documentation for the API is still under work, but the client wrapper https://github.com/wwPDB/py-onedep_deposition/blob/master/onedep_deposition/cli/cli.py  is a good example on how to call its methods from any other code.</p>"},{"location":"cli/#files","title":"Files","text":"<p>The <code>files</code> command group is used to upload and remove files from depositions, as well as get a list of files already uploaded and also to provide metadata for EM entries.</p> <p>The command to upload files is:</p> <pre><code>onedep-deposition files upload &lt;dep_id&gt; -f &lt;file_path&gt; -t &lt;file_type&gt;\n</code></pre> <p>Check the documentation for the allowed file types.</p> <p>To remove files or update their metadata, it's required to provide a file identifier, which can be accessed through the <code>get</code> command.</p> <pre><code>onedep-deposition files get &lt;dep_id&gt;\n</code></pre>"},{"location":"cli/#api_1","title":"API","text":"<p>To use the files API for uploading files, you'll need to provide the proper enumeration type. An example can be seen below.</p> <pre><code>from onedep_deposition.enum import FileType\nfile = api.upload_file(dep_id, file_path, file_type, overwrite)\n</code></pre>"},{"location":"cli/#users","title":"Users","text":""},{"location":"cli/#cli_1","title":"CLI","text":"<p>Access to depositions can be managed using the <code>users</code> command group. </p> <pre><code>onedep-deposition users get &lt;dep_id&gt; # list users\nonedep-deposition users add &lt;dep_id&gt; &lt;user_orcid&gt; # add new user\nonedep-deposition users remove &lt;dep_id&gt; &lt;user_orcid&gt; # remove user\n</code></pre>"},{"location":"cli/#api_2","title":"API","text":"<p>The API calls to manage users are:</p> <pre><code>users = api.get_users(dep_id)\nusers = api.add_user(dep_id, orcid=orcid)\nused_deleted = api.remove_user(dep_id, orcid)\n</code></pre>"},{"location":"depositapi/","title":"DepositApi","text":""},{"location":"depositapi/#onedep_deposition.deposit_api","title":"<code>onedep_deposition.deposit_api</code>","text":""},{"location":"depositapi/#onedep_deposition.deposit_api-classes","title":"Classes","text":""},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi","title":"<code>DepositApi</code>","text":"<p>Deposit API wrapper</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>class DepositApi:\n\"\"\"Deposit API wrapper\"\"\"\ndef __init__(self, hostname: str = None, api_key: str = '', ver: str = 'v1',\nssl_verify: bool = True, redirect: bool = True, logger: logging.Logger = None):\n\"\"\"\n        Constructor method for DepositAPI wrapper\n        :param hostname: Site url\n        :param api_key: User public API key\n        :param ver: version (usually v1)\n        :param ssl_verify: Perform a SSL verification? True for production\n        :param redirect: Allow site redirects? True for production\n        :param logger: Attach a logger\n        \"\"\"\nself._hostname = hostname\nself._api_key = api_key\nself._version = ver\nself._ssl_verify = ssl_verify\nself._logger = logger\nself._redirect = redirect\nif not hostname:\n# Default hostname is RCSB until a deposition is created\nhostname = \"https://deposit.wwpdb.org/deposition\"\nself._connect(hostname)\ndef _connect(self, hostname: str = None) -&gt; None:\nif hostname:\nself._hostname = hostname\nself._rest_adapter = RestAdapter(self._hostname, self._api_key, self._version, self._ssl_verify, self._logger)\n@handle_invalid_deposit_site\ndef create_deposition(self, email: str, users: List[str], country: Country,  # pylint: disable=unused-argument\nexperiments: List[Experiment], password: str = \"\", **kwargs) -&gt; Deposit:\n\"\"\"\n        General method to create a deposition passing an Experiment object\n        :param email: User e-mail\n        :param users: List of ORCID ids that can access this deposition\n        :param country: Country from enum list\n        :param experiments: List of Experiment objects\n        :param password: Password\n        :return: Response\n        \"\"\"\ndata = {\n\"email\": email,\n\"users\": users,\n\"country\": country.value,\n\"experiments\": [experiment.json() for experiment in experiments]\n}\nif password:\ndata[\"password\"] = password\ntry:\nresponse = self._rest_adapter.post(\"depositions/new\", data=data)\nexcept InvalidDepositSiteException as e:\nif self._redirect:\nself._connect(e.site)\nresponse = self._rest_adapter.post(\"depositions/new\", data=data)\nelse:\nraise e\nresponse.data[\"dep_id\"] = response.data.pop(\"id\")\ndeposit = Deposit(**response.data)\nreturn deposit\ndef create_em_deposition(self, email: str, users: List[str], country: Country, subtype: Union[EMSubType, str],  # pylint: disable=unused-argument\ncoordinates: bool, related_emdb: str = None, password: str = \"\", **kwargs) -&gt; Deposit:\n\"\"\"\n        Create an EM deposition\n        :param email: User e-mail\n        :param users: List of ORCID ids that can access this deposition\n        :param country: Country from enum list\n        :param subtype: EM sub type, accepts enum or string\n        :param coordinates: Depositing coordinates file?\n        :param related_emdb: Related EMDB id\n        :param password: Password\n        :return: Response\n        \"\"\"\nexperiment = Experiment(exp_type=\"em\", coordinates=coordinates, subtype=subtype, related_emdb=related_emdb)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\ndef create_xray_deposition(self, email: str, users: List[str], country: Country, password: str = \"\", **kwargs) -&gt; Deposit:  # pylint: disable=unused-argument\n\"\"\"\n        Create an XRAY deposition\n        :param email: User e-mail\n        :param users: List of ORCID ids that can access this deposition\n        :param country: Country from enum list\n        :param password: Password\n        :return: Response\n        \"\"\"\nexperiment = Experiment(exp_type=\"xray\", coordinates=True)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\ndef create_fiber_deposition(self, email: str, users: List[str], country: Country, password: str = \"\", **kwargs) -&gt; Deposit:  # pylint: disable=unused-argument\n\"\"\"\n        Create a Fiber diffraction deposition\n        :param email: User e-mail\n        :param users: List of ORCID ids that can access this deposition\n        :param country: Country from enum list\n        :param password: Password\n        :return: Response\n        \"\"\"\nexperiment = Experiment(exp_type=\"fiber\", coordinates=True)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\ndef create_neutron_deposition(self, email: str, users: List[str], country: Country, password: str = \"\", **kwargs) -&gt; Deposit:  # pylint: disable=unused-argument\n\"\"\"\n        Create a Neutron diffraction deposition\n        :param email: User e-mail\n        :param users: List of ORCID ids that can access this deposition\n        :param country: Country from enum list\n        :param password: Password\n        :return: Response\n        \"\"\"\nexperiment = Experiment(exp_type=\"neutron\", coordinates=True)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\ndef create_ec_deposition(self, email: str, users: List[str], country: Country, coordinates: bool, password: str = \"\",  # pylint: disable=unused-argument\nrelated_emdb: str = None, sf_only: bool = False, **kwargs) -&gt; Deposit:\n\"\"\"\n        Create an Electron crystallography deposition\n        :param email: User e-mail\n        :param users: List of ORCID ids that can access this deposition\n        :param country: Country from enum list\n        :param coordinates: Depositing coordinates file?\n        :param password: Password\n        :param related_emdb: Related EMDB id\n        :param sf_only: Structure factor only?\n        :return: Response\n        \"\"\"\nexperiment = Experiment(exp_type=\"ec\", related_emdb=related_emdb, coordinates=coordinates, sf_only=sf_only)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\ndef create_nmr_deposition(self, email: str, users: List[str], country: Country, coordinates: bool, password: str = \"\",  # pylint: disable=unused-argument\nrelated_bmrb: str = None, **kwargs) -&gt; Deposit:\n\"\"\"\n        Create a NMR deposition\n        :param email: User e-mail\n        :param users: List of ORCID ids that can access this deposition\n        :param country: Country from enum list\n        :param coordinates: Depositing coordinates file?\n        :param password: Password\n        :param related_bmrb: Related BMRB id\n        :return: Response\n        \"\"\"\nexperiment = Experiment(exp_type=\"nmr\", related_bmrb=related_bmrb, coordinates=coordinates)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\ndef create_ssnmr_deposition(self, email: str, users: List[str], country: Country, coordinates: bool, password: str = \"\",  # pylint: disable=unused-argument\nrelated_bmrb: str = None, **kwargs) -&gt; Deposit:\n\"\"\"\n        Create a Solid-state NMR E deposition\n        :param email: User e-mail\n        :param users: List of ORCID ids that can access this deposition\n        :param country: Country from enum list\n        :param coordinates: Depositing coordinates file?\n        :param password: Password\n        :param related_bmrb: Related BMRB id\n        :return: Response\n        \"\"\"\nexperiment = Experiment(exp_type=\"ssnmr\", related_bmrb=related_bmrb, coordinates=coordinates)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\n@handle_invalid_deposit_site\ndef get_deposition(self, dep_id: str) -&gt; Union[Deposit, None]:\n\"\"\"\n        Get deposition from ID\n        :param dep_id: Deposition ID\n        :return: Deposit\n        \"\"\"\nresponse = self._rest_adapter.get(f\"depositions/{dep_id}\")\nresponse.data['dep_id'] = response.data.pop('id')\nreturn Deposit(**response.data)\n@handle_invalid_deposit_site\ndef get_all_depositions(self) -&gt; List[Deposit]:\n\"\"\"\n        Get all depositions from an user\n        :return: List[Deposit]\n        \"\"\"\ndepositions = []\nresponse = self._rest_adapter.get(\"depositions/\")\nfor deposition_json in response.data[\"items\"]:\ndeposition_json['dep_id'] = deposition_json.pop('id')\ndeposition = Deposit(**deposition_json)\ndepositions.append(deposition)\nreturn depositions\n@handle_invalid_deposit_site\ndef get_users(self, dep_id: str):\n\"\"\"\n        Get users from deposition\n        :param dep_id:\n        :return: Depositor\n        \"\"\"\nusers = []\nresponse = self._rest_adapter.get(f\"depositions/{dep_id}/users/\")\nfor user_json in response.data:\nuser_json[\"user_id\"] = user_json.pop(\"id\")\nuser = Depositor(**user_json)\nusers.append(user)\nreturn users\n@handle_invalid_deposit_site\ndef add_user(self, dep_id: str, orcid: Union[List, str]) -&gt; List[Depositor]:\n\"\"\"\n        Grant access from given users to deposition\n        :param dep_id: Deposition ID\n        :param orcid: Orcid ID or list of Orcid ids\n        :return: List of depositors\n        \"\"\"\nusers = []\ndata = []\nif type(orcid) == str:\ndata.append({'orcid': orcid})\nelif type(orcid) == list:\nfor orcid_id in orcid:\ndata.append({'orcid': orcid_id})\nresponse = self._rest_adapter.post(f\"depositions/{dep_id}/users/\", data=data)\nfor user_json in response.data:\nuser_json[\"user_id\"] = user_json.pop(\"id\")\nusers.append(Depositor(**user_json))\nreturn users\n@handle_invalid_deposit_site\ndef remove_user(self, dep_id: str, orcid: str):\n\"\"\"\n        Remove access from an user to a deposition\n        :param dep_id: Deposition id\n        :param orcid: Orcid id\n        :return: Depositor\n        \"\"\"\nself._rest_adapter.delete(f\"depositions/{dep_id}/users/{orcid}\")\nreturn True\n@handle_invalid_deposit_site\ndef upload_file(self, dep_id: str, file_path: str, file_type: Union[str, FileType], overwrite: bool = False) -&gt; DepositedFile:\n\"\"\"\n        Upload a file in a deposition\n        :param dep_id: Deposition id\n        :param file_path: File path\n        :param file_type: Deposition file type\n        :param overwrite: If true, overwrite all previously uploaded file with the same type\n        :return: File response\n        \"\"\"\nfiles = {}\nfile_type_str = file_type\nif not os.path.exists(file_path):\nraise DepositApiException(\"Invalid input file\", 404)\nif type(file_type) == FileType:\nfile_type_str = file_type.value\nmime_type, _encoding = mimetypes.guess_type(file_path)\nfile_name = os.path.basename(file_path)\ndata = {\n\"name\": file_name,\n\"type\": file_type_str\n}\nif overwrite:\ndeposited_files = self.get_files(dep_id)\nfor file in deposited_files:\nif file.file_type.value == file_type_str:\nself.remove_file(dep_id, file.file_id)\nwith open(file_path, \"rb\") as fp:\nfiles[\"file\"] = (file_name, fp, mime_type)\nresponse = self._rest_adapter.post(f\"depositions/{dep_id}/files/\", data=data, files=files, content_type=\"\")\nresponse.data[\"file_type\"] = response.data.pop(\"type\")\nresponse.data[\"file_id\"] = response.data.pop(\"id\")\nreturn DepositedFile(**response.data)\n@handle_invalid_deposit_site\ndef get_files(self, dep_id: str) -&gt; DepositedFilesSet:\n\"\"\"\n        Get all files in deposition\n        :param dep_id: Deposition ID\n        :return: List of uploaded files\n        \"\"\"\nresponse = self._rest_adapter.get(f\"depositions/{dep_id}/files/\")\nreturn DepositedFilesSet(**response.data)\n@handle_invalid_deposit_site\ndef remove_file(self, dep_id: str, file_id: int):\n\"\"\"\n        Remove a file from a deposition\n        :param dep_id: Deposition ID\n        :param file_id: File ID\n        :return: None\n        \"\"\"\nself._rest_adapter.delete(f\"depositions/{dep_id}/files/{file_id}\")\nreturn True\n@handle_invalid_deposit_site\ndef get_status(self, dep_id: str) -&gt; DepositStatus:\n\"\"\"\n        Return the deposition status\n        :param dep_id: Deposition ID\n        :return: Status\n        \"\"\"\nresponse = self._rest_adapter.get(f\"depositions/{dep_id}/status\")\ntry:\nstatus = DepositStatus(**response.data)\nexcept TypeError:\nstatus = DepositError(**response.data)\nreturn status\n@handle_invalid_deposit_site\ndef process(self, dep_id: str, voxel: Dict = None, copy_from_id: str = None, copy_contact: bool = False,\ncopy_authors: bool = False, copy_citation: bool = False, copy_grant: bool = False,\ncopy_em_exp_data: bool = False):\n\"\"\"\n        Trigger file processing\n        :param dep_id: Deposition ID\n        :param voxel: EM Voxel list\n        :param copy_from_id: Copy metadata from another deposition?\n        :param copy_contact: Copy contract metadata?\n        :param copy_authors: Copy authors?\n        :param copy_citation: Copy citation?\n        :param copy_grant: Copy grant?\n        :param copy_em_exp_data: Copy EM experimental data?\n        :return: Status\n        \"\"\"\ncopy_elements = []\ndata = {}\nif voxel:\ndata = voxel\nif copy_from_id:\ncopy_elements.append(\"contact\") if copy_contact else None  # pylint: disable=expression-not-assigned\ncopy_elements.append(\"authors\") if copy_authors else None  # pylint: disable=expression-not-assigned\ncopy_elements.append(\"citation\") if copy_citation else None  # pylint: disable=expression-not-assigned\ncopy_elements.append(\"grant\") if copy_grant else None  # pylint: disable=expression-not-assigned\ncopy_elements.append(\"em_exp\") if copy_em_exp_data else None  # pylint: disable=expression-not-assigned\ndata[\"related\"] = {\n'id': copy_from_id,\n'items': copy_elements\n}\nresponse = self._rest_adapter.post(f\"depositions/{dep_id}/process\", data=data)\ntry:\nstatus = DepositStatus(**response.data)\nexcept TypeError:\nstatus = DepositError(**response.data)\nreturn status\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi-functions","title":"Functions","text":""},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.__init__","title":"<code>__init__(hostname=None, api_key='', ver='v1', ssl_verify=True, redirect=True, logger=None)</code>","text":"<p>Constructor method for DepositAPI wrapper :param hostname: Site url :param api_key: User public API key :param ver: version (usually v1) :param ssl_verify: Perform a SSL verification? True for production :param redirect: Allow site redirects? True for production :param logger: Attach a logger</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>def __init__(self, hostname: str = None, api_key: str = '', ver: str = 'v1',\nssl_verify: bool = True, redirect: bool = True, logger: logging.Logger = None):\n\"\"\"\n    Constructor method for DepositAPI wrapper\n    :param hostname: Site url\n    :param api_key: User public API key\n    :param ver: version (usually v1)\n    :param ssl_verify: Perform a SSL verification? True for production\n    :param redirect: Allow site redirects? True for production\n    :param logger: Attach a logger\n    \"\"\"\nself._hostname = hostname\nself._api_key = api_key\nself._version = ver\nself._ssl_verify = ssl_verify\nself._logger = logger\nself._redirect = redirect\nif not hostname:\n# Default hostname is RCSB until a deposition is created\nhostname = \"https://deposit.wwpdb.org/deposition\"\nself._connect(hostname)\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.add_user","title":"<code>add_user(dep_id, orcid)</code>","text":"<p>Grant access from given users to deposition :param dep_id: Deposition ID :param orcid: Orcid ID or list of Orcid ids :return: List of depositors</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef add_user(self, dep_id: str, orcid: Union[List, str]) -&gt; List[Depositor]:\n\"\"\"\n    Grant access from given users to deposition\n    :param dep_id: Deposition ID\n    :param orcid: Orcid ID or list of Orcid ids\n    :return: List of depositors\n    \"\"\"\nusers = []\ndata = []\nif type(orcid) == str:\ndata.append({'orcid': orcid})\nelif type(orcid) == list:\nfor orcid_id in orcid:\ndata.append({'orcid': orcid_id})\nresponse = self._rest_adapter.post(f\"depositions/{dep_id}/users/\", data=data)\nfor user_json in response.data:\nuser_json[\"user_id\"] = user_json.pop(\"id\")\nusers.append(Depositor(**user_json))\nreturn users\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.create_deposition","title":"<code>create_deposition(email, users, country, experiments, password='', **kwargs)</code>","text":"<p>General method to create a deposition passing an Experiment object :param email: User e-mail :param users: List of ORCID ids that can access this deposition :param country: Country from enum list :param experiments: List of Experiment objects :param password: Password :return: Response</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef create_deposition(self, email: str, users: List[str], country: Country,  # pylint: disable=unused-argument\nexperiments: List[Experiment], password: str = \"\", **kwargs) -&gt; Deposit:\n\"\"\"\n    General method to create a deposition passing an Experiment object\n    :param email: User e-mail\n    :param users: List of ORCID ids that can access this deposition\n    :param country: Country from enum list\n    :param experiments: List of Experiment objects\n    :param password: Password\n    :return: Response\n    \"\"\"\ndata = {\n\"email\": email,\n\"users\": users,\n\"country\": country.value,\n\"experiments\": [experiment.json() for experiment in experiments]\n}\nif password:\ndata[\"password\"] = password\ntry:\nresponse = self._rest_adapter.post(\"depositions/new\", data=data)\nexcept InvalidDepositSiteException as e:\nif self._redirect:\nself._connect(e.site)\nresponse = self._rest_adapter.post(\"depositions/new\", data=data)\nelse:\nraise e\nresponse.data[\"dep_id\"] = response.data.pop(\"id\")\ndeposit = Deposit(**response.data)\nreturn deposit\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.create_ec_deposition","title":"<code>create_ec_deposition(email, users, country, coordinates, password='', related_emdb=None, sf_only=False, **kwargs)</code>","text":"<p>Create an Electron crystallography deposition :param email: User e-mail :param users: List of ORCID ids that can access this deposition :param country: Country from enum list :param coordinates: Depositing coordinates file? :param password: Password :param related_emdb: Related EMDB id :param sf_only: Structure factor only? :return: Response</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>def create_ec_deposition(self, email: str, users: List[str], country: Country, coordinates: bool, password: str = \"\",  # pylint: disable=unused-argument\nrelated_emdb: str = None, sf_only: bool = False, **kwargs) -&gt; Deposit:\n\"\"\"\n    Create an Electron crystallography deposition\n    :param email: User e-mail\n    :param users: List of ORCID ids that can access this deposition\n    :param country: Country from enum list\n    :param coordinates: Depositing coordinates file?\n    :param password: Password\n    :param related_emdb: Related EMDB id\n    :param sf_only: Structure factor only?\n    :return: Response\n    \"\"\"\nexperiment = Experiment(exp_type=\"ec\", related_emdb=related_emdb, coordinates=coordinates, sf_only=sf_only)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.create_em_deposition","title":"<code>create_em_deposition(email, users, country, subtype, coordinates, related_emdb=None, password='', **kwargs)</code>","text":"<p>Create an EM deposition :param email: User e-mail :param users: List of ORCID ids that can access this deposition :param country: Country from enum list :param subtype: EM sub type, accepts enum or string :param coordinates: Depositing coordinates file? :param related_emdb: Related EMDB id :param password: Password :return: Response</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>def create_em_deposition(self, email: str, users: List[str], country: Country, subtype: Union[EMSubType, str],  # pylint: disable=unused-argument\ncoordinates: bool, related_emdb: str = None, password: str = \"\", **kwargs) -&gt; Deposit:\n\"\"\"\n    Create an EM deposition\n    :param email: User e-mail\n    :param users: List of ORCID ids that can access this deposition\n    :param country: Country from enum list\n    :param subtype: EM sub type, accepts enum or string\n    :param coordinates: Depositing coordinates file?\n    :param related_emdb: Related EMDB id\n    :param password: Password\n    :return: Response\n    \"\"\"\nexperiment = Experiment(exp_type=\"em\", coordinates=coordinates, subtype=subtype, related_emdb=related_emdb)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.create_fiber_deposition","title":"<code>create_fiber_deposition(email, users, country, password='', **kwargs)</code>","text":"<p>Create a Fiber diffraction deposition :param email: User e-mail :param users: List of ORCID ids that can access this deposition :param country: Country from enum list :param password: Password :return: Response</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>def create_fiber_deposition(self, email: str, users: List[str], country: Country, password: str = \"\", **kwargs) -&gt; Deposit:  # pylint: disable=unused-argument\n\"\"\"\n    Create a Fiber diffraction deposition\n    :param email: User e-mail\n    :param users: List of ORCID ids that can access this deposition\n    :param country: Country from enum list\n    :param password: Password\n    :return: Response\n    \"\"\"\nexperiment = Experiment(exp_type=\"fiber\", coordinates=True)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.create_neutron_deposition","title":"<code>create_neutron_deposition(email, users, country, password='', **kwargs)</code>","text":"<p>Create a Neutron diffraction deposition :param email: User e-mail :param users: List of ORCID ids that can access this deposition :param country: Country from enum list :param password: Password :return: Response</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>def create_neutron_deposition(self, email: str, users: List[str], country: Country, password: str = \"\", **kwargs) -&gt; Deposit:  # pylint: disable=unused-argument\n\"\"\"\n    Create a Neutron diffraction deposition\n    :param email: User e-mail\n    :param users: List of ORCID ids that can access this deposition\n    :param country: Country from enum list\n    :param password: Password\n    :return: Response\n    \"\"\"\nexperiment = Experiment(exp_type=\"neutron\", coordinates=True)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.create_nmr_deposition","title":"<code>create_nmr_deposition(email, users, country, coordinates, password='', related_bmrb=None, **kwargs)</code>","text":"<p>Create a NMR deposition :param email: User e-mail :param users: List of ORCID ids that can access this deposition :param country: Country from enum list :param coordinates: Depositing coordinates file? :param password: Password :param related_bmrb: Related BMRB id :return: Response</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>def create_nmr_deposition(self, email: str, users: List[str], country: Country, coordinates: bool, password: str = \"\",  # pylint: disable=unused-argument\nrelated_bmrb: str = None, **kwargs) -&gt; Deposit:\n\"\"\"\n    Create a NMR deposition\n    :param email: User e-mail\n    :param users: List of ORCID ids that can access this deposition\n    :param country: Country from enum list\n    :param coordinates: Depositing coordinates file?\n    :param password: Password\n    :param related_bmrb: Related BMRB id\n    :return: Response\n    \"\"\"\nexperiment = Experiment(exp_type=\"nmr\", related_bmrb=related_bmrb, coordinates=coordinates)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.create_ssnmr_deposition","title":"<code>create_ssnmr_deposition(email, users, country, coordinates, password='', related_bmrb=None, **kwargs)</code>","text":"<p>Create a Solid-state NMR E deposition :param email: User e-mail :param users: List of ORCID ids that can access this deposition :param country: Country from enum list :param coordinates: Depositing coordinates file? :param password: Password :param related_bmrb: Related BMRB id :return: Response</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>def create_ssnmr_deposition(self, email: str, users: List[str], country: Country, coordinates: bool, password: str = \"\",  # pylint: disable=unused-argument\nrelated_bmrb: str = None, **kwargs) -&gt; Deposit:\n\"\"\"\n    Create a Solid-state NMR E deposition\n    :param email: User e-mail\n    :param users: List of ORCID ids that can access this deposition\n    :param country: Country from enum list\n    :param coordinates: Depositing coordinates file?\n    :param password: Password\n    :param related_bmrb: Related BMRB id\n    :return: Response\n    \"\"\"\nexperiment = Experiment(exp_type=\"ssnmr\", related_bmrb=related_bmrb, coordinates=coordinates)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.create_xray_deposition","title":"<code>create_xray_deposition(email, users, country, password='', **kwargs)</code>","text":"<p>Create an XRAY deposition :param email: User e-mail :param users: List of ORCID ids that can access this deposition :param country: Country from enum list :param password: Password :return: Response</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>def create_xray_deposition(self, email: str, users: List[str], country: Country, password: str = \"\", **kwargs) -&gt; Deposit:  # pylint: disable=unused-argument\n\"\"\"\n    Create an XRAY deposition\n    :param email: User e-mail\n    :param users: List of ORCID ids that can access this deposition\n    :param country: Country from enum list\n    :param password: Password\n    :return: Response\n    \"\"\"\nexperiment = Experiment(exp_type=\"xray\", coordinates=True)\ndeposit = self.create_deposition(email=email, users=users, country=country, experiments=[experiment], password=password)\nreturn deposit\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.get_all_depositions","title":"<code>get_all_depositions()</code>","text":"<p>Get all depositions from an user :return: List[Deposit]</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef get_all_depositions(self) -&gt; List[Deposit]:\n\"\"\"\n    Get all depositions from an user\n    :return: List[Deposit]\n    \"\"\"\ndepositions = []\nresponse = self._rest_adapter.get(\"depositions/\")\nfor deposition_json in response.data[\"items\"]:\ndeposition_json['dep_id'] = deposition_json.pop('id')\ndeposition = Deposit(**deposition_json)\ndepositions.append(deposition)\nreturn depositions\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.get_deposition","title":"<code>get_deposition(dep_id)</code>","text":"<p>Get deposition from ID :param dep_id: Deposition ID :return: Deposit</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef get_deposition(self, dep_id: str) -&gt; Union[Deposit, None]:\n\"\"\"\n    Get deposition from ID\n    :param dep_id: Deposition ID\n    :return: Deposit\n    \"\"\"\nresponse = self._rest_adapter.get(f\"depositions/{dep_id}\")\nresponse.data['dep_id'] = response.data.pop('id')\nreturn Deposit(**response.data)\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.get_files","title":"<code>get_files(dep_id)</code>","text":"<p>Get all files in deposition :param dep_id: Deposition ID :return: List of uploaded files</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef get_files(self, dep_id: str) -&gt; DepositedFilesSet:\n\"\"\"\n    Get all files in deposition\n    :param dep_id: Deposition ID\n    :return: List of uploaded files\n    \"\"\"\nresponse = self._rest_adapter.get(f\"depositions/{dep_id}/files/\")\nreturn DepositedFilesSet(**response.data)\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.get_status","title":"<code>get_status(dep_id)</code>","text":"<p>Return the deposition status :param dep_id: Deposition ID :return: Status</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef get_status(self, dep_id: str) -&gt; DepositStatus:\n\"\"\"\n    Return the deposition status\n    :param dep_id: Deposition ID\n    :return: Status\n    \"\"\"\nresponse = self._rest_adapter.get(f\"depositions/{dep_id}/status\")\ntry:\nstatus = DepositStatus(**response.data)\nexcept TypeError:\nstatus = DepositError(**response.data)\nreturn status\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.get_users","title":"<code>get_users(dep_id)</code>","text":"<p>Get users from deposition :param dep_id: :return: Depositor</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef get_users(self, dep_id: str):\n\"\"\"\n    Get users from deposition\n    :param dep_id:\n    :return: Depositor\n    \"\"\"\nusers = []\nresponse = self._rest_adapter.get(f\"depositions/{dep_id}/users/\")\nfor user_json in response.data:\nuser_json[\"user_id\"] = user_json.pop(\"id\")\nuser = Depositor(**user_json)\nusers.append(user)\nreturn users\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.process","title":"<code>process(dep_id, voxel=None, copy_from_id=None, copy_contact=False, copy_authors=False, copy_citation=False, copy_grant=False, copy_em_exp_data=False)</code>","text":"<p>Trigger file processing :param dep_id: Deposition ID :param voxel: EM Voxel list :param copy_from_id: Copy metadata from another deposition? :param copy_contact: Copy contract metadata? :param copy_authors: Copy authors? :param copy_citation: Copy citation? :param copy_grant: Copy grant? :param copy_em_exp_data: Copy EM experimental data? :return: Status</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef process(self, dep_id: str, voxel: Dict = None, copy_from_id: str = None, copy_contact: bool = False,\ncopy_authors: bool = False, copy_citation: bool = False, copy_grant: bool = False,\ncopy_em_exp_data: bool = False):\n\"\"\"\n    Trigger file processing\n    :param dep_id: Deposition ID\n    :param voxel: EM Voxel list\n    :param copy_from_id: Copy metadata from another deposition?\n    :param copy_contact: Copy contract metadata?\n    :param copy_authors: Copy authors?\n    :param copy_citation: Copy citation?\n    :param copy_grant: Copy grant?\n    :param copy_em_exp_data: Copy EM experimental data?\n    :return: Status\n    \"\"\"\ncopy_elements = []\ndata = {}\nif voxel:\ndata = voxel\nif copy_from_id:\ncopy_elements.append(\"contact\") if copy_contact else None  # pylint: disable=expression-not-assigned\ncopy_elements.append(\"authors\") if copy_authors else None  # pylint: disable=expression-not-assigned\ncopy_elements.append(\"citation\") if copy_citation else None  # pylint: disable=expression-not-assigned\ncopy_elements.append(\"grant\") if copy_grant else None  # pylint: disable=expression-not-assigned\ncopy_elements.append(\"em_exp\") if copy_em_exp_data else None  # pylint: disable=expression-not-assigned\ndata[\"related\"] = {\n'id': copy_from_id,\n'items': copy_elements\n}\nresponse = self._rest_adapter.post(f\"depositions/{dep_id}/process\", data=data)\ntry:\nstatus = DepositStatus(**response.data)\nexcept TypeError:\nstatus = DepositError(**response.data)\nreturn status\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.remove_file","title":"<code>remove_file(dep_id, file_id)</code>","text":"<p>Remove a file from a deposition :param dep_id: Deposition ID :param file_id: File ID :return: None</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef remove_file(self, dep_id: str, file_id: int):\n\"\"\"\n    Remove a file from a deposition\n    :param dep_id: Deposition ID\n    :param file_id: File ID\n    :return: None\n    \"\"\"\nself._rest_adapter.delete(f\"depositions/{dep_id}/files/{file_id}\")\nreturn True\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.remove_user","title":"<code>remove_user(dep_id, orcid)</code>","text":"<p>Remove access from an user to a deposition :param dep_id: Deposition id :param orcid: Orcid id :return: Depositor</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef remove_user(self, dep_id: str, orcid: str):\n\"\"\"\n    Remove access from an user to a deposition\n    :param dep_id: Deposition id\n    :param orcid: Orcid id\n    :return: Depositor\n    \"\"\"\nself._rest_adapter.delete(f\"depositions/{dep_id}/users/{orcid}\")\nreturn True\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api.DepositApi.upload_file","title":"<code>upload_file(dep_id, file_path, file_type, overwrite=False)</code>","text":"<p>Upload a file in a deposition :param dep_id: Deposition id :param file_path: File path :param file_type: Deposition file type :param overwrite: If true, overwrite all previously uploaded file with the same type :return: File response</p> Source code in <code>onedep_deposition/deposit_api.py</code> <pre><code>@handle_invalid_deposit_site\ndef upload_file(self, dep_id: str, file_path: str, file_type: Union[str, FileType], overwrite: bool = False) -&gt; DepositedFile:\n\"\"\"\n    Upload a file in a deposition\n    :param dep_id: Deposition id\n    :param file_path: File path\n    :param file_type: Deposition file type\n    :param overwrite: If true, overwrite all previously uploaded file with the same type\n    :return: File response\n    \"\"\"\nfiles = {}\nfile_type_str = file_type\nif not os.path.exists(file_path):\nraise DepositApiException(\"Invalid input file\", 404)\nif type(file_type) == FileType:\nfile_type_str = file_type.value\nmime_type, _encoding = mimetypes.guess_type(file_path)\nfile_name = os.path.basename(file_path)\ndata = {\n\"name\": file_name,\n\"type\": file_type_str\n}\nif overwrite:\ndeposited_files = self.get_files(dep_id)\nfor file in deposited_files:\nif file.file_type.value == file_type_str:\nself.remove_file(dep_id, file.file_id)\nwith open(file_path, \"rb\") as fp:\nfiles[\"file\"] = (file_name, fp, mime_type)\nresponse = self._rest_adapter.post(f\"depositions/{dep_id}/files/\", data=data, files=files, content_type=\"\")\nresponse.data[\"file_type\"] = response.data.pop(\"type\")\nresponse.data[\"file_id\"] = response.data.pop(\"id\")\nreturn DepositedFile(**response.data)\n</code></pre>"},{"location":"depositapi/#onedep_deposition.deposit_api-functions","title":"Functions","text":""},{"location":"enum/","title":"Enum","text":"<p><code>onedep_deposition.enum</code> provides several classes supporting enumerations required by the deposition system.</p>"},{"location":"enum/#onedep_deposition.enum","title":"<code>onedep_deposition.enum</code>","text":""},{"location":"enum/#onedep_deposition.enum-classes","title":"Classes","text":""},{"location":"enum/#onedep_deposition.enum.Country","title":"<code>Country</code>","text":"Source code in <code>onedep_deposition/enum.py</code> <pre><code>class Country(enum.Enum):\nAFGHANISTAN = \"Afghanistan\"\nALAND = 'Aland Islands'\nALBANIA = \"Albania\"\nALGERIA = \"Algeria\"\nAMERICAN_SAMOA = \"American Samoa\"\nANDORRA = \"Andorra\"\nANGOLA = \"Angola\"\nANGUILLA = \"Anguilla\"\nANTARCTICA = \"Antarctica\"\nANTIGUA_BARBUDA = \"Antigua And Barbuda\"\nARGENTINA = \"Argentina\"\nARMENIA = \"Armenia\"\nARUBA = \"Aruba\"\nAUSTRALIA = \"Australia\"\nAUSTRIA = \"Austria\"\nAZERBAIJAN = \"Azerbaijan\"\nBAHAMAS = \"Bahamas\"\nBAHRAIN = \"Bahrain\"\nBANGLADESH = \"Bangladesh\"\nBARBADOS = \"Barbados\"\nBELARUS = \"Belarus\"\nBELGIUM = \"Belgium\"\nBELIZE = \"Belize\"\nBENIN = \"Benin\"\nBERMUDA = \"Bermuda\"\nBHUTAN = \"Bhutan\"\nBOLIVIA = \"Bolivia, Plurinational State Of\"\nBONAIRE = \"Bonaire, Sint Eustatius And Saba\"\nBOSNIA_HERZEGOVINA = \"Bosnia And Herzegovina\"\nBOTSWANA = \"Botswana\"\nBOUVET = \"Bouvet Island\"\nBRAZIL = \"Brazil\"\nBRUNEI = \"Brunei Darussalam\"\nBULGARIA = \"Bulgaria\"\nBURKINA_FASO = \"Burkina Faso\"\nBURUNDI = \"Burundi\"\nCAMBODIA = \"Cambodia\"\nCAMEROON = \"Cameroon\"\nCANADA = \"Canada\"\nCAPE_VERDE = \"Cape Verde\"\nCAR = \"Central African Republic\"\nCAYMAN = \"Cayman Islands\"\nCHAD = \"Chad\"\nCHILE = \"Chile\"\nCHINA = \"China\"\nCHRISTMAS = \"Christmas Island\"\nCOCOS = \"Cocos (Keeling) Islands\"\nCOLOMBIA = \"Colombia\"\nCOMOROS = \"Comoros\"\nCONGO = \"Congo\"\nCOOK = \"Cook Islands\"\nCOSTA_RICA = \"Costa Rica\"\nCROATIA = \"Croatia\"\nCUBA = \"Cuba\"\nCURAAAO = \"CuraAao\"\nCYPRUS = \"Cyprus\"\nCZECH_REPUBLIC = \"Czech Republic\"\nDENMARK = \"Denmark\"\nDJIBOUTI = \"Djibouti\"\nDOMINICA = \"Dominica\"\nDOMINICAN_REPUBLIC = \"Dominican Republic\"\nDRC = \"Congo, The Democratic Republic Of The\"\nECUADOR = \"Ecuador\"\nEGYPT = \"Egypt\"\nEL_SALVADOR = \"El Salvador\"\nEQUATORIAL_GUINEA = \"Equatorial Guinea\"\nERITREA = \"Eritrea\"\nESTONIA = \"Estonia\"\nETHIOPIA = \"Ethiopia\"\nFAROE = \"Faroe Islands\"\nFIJI = \"Fiji\"\nFINLAND = \"Finland\"\nFRANCE = \"France\"\nFRENCH_GUIANA = \"French Guiana\"\nFRENCH_POLYNESIA = \"French Polynesia\"\nFRENCH_SOUTHERN = \"French Southern Territories\"\nGABON = \"Gabon\"\nGAMBIA = \"Gambia\"\nGEORGIA = \"Georgia\"\nGERMANY = \"Germany\"\nGHANA = \"Ghana\"\nGIBRALTAR = \"Gibraltar\"\nGREECE = \"Greece\"\nGREENLAND = \"Greenland\"\nGRENADA = \"Grenada\"\nGUADELOUPE = \"Guadeloupe\"\nGUAM = \"Guam\"\nGUATEMALA = \"Guatemala\"\nGUERNSEY = \"Guernsey\"\nGUINEA = \"Guinea\"\nGUINEA_BISSAU = \"Guinea-Bissau\"\nGUYANA = \"Guyana\"\nHAITI = \"Haiti\"\nHEARD_MCDONALD = \"Heard Island And Mcdonald Islands\"\nHONDURAS = \"Honduras\"\nHONG_KONG = \"Hong Kong\"\nHUNGARY = \"Hungary\"\nICELAND = \"Iceland\"\nINDIA = \"India\"\nINDONESIA = \"Indonesia\"\nIRAN = \"Iran, Islamic Republic Of\"\nIRAQ = \"Iraq\"\nIRELAND = \"Ireland\"\nISLE_OF_MAN = \"Isle Of Man\"\nISRAEL = \"Israel\"\nITALY = \"Italy\"\nIVORY_COAST = \"CAte D'Ivoire\"\nJAMAICA = \"Jamaica\"\nJAPAN = \"Japan\"\nJERSEY = \"Jersey\"\nJORDAN = \"Jordan\"\nKAZAKHSTAN = \"Kazakhstan\"\nKENYA = \"Kenya\"\nKIRIBATI = \"Kiribati\"\nKUWAIT = \"Kuwait\"\nKYRGYZSTAN = \"Kyrgyzstan\"\nLAOS = \"Lao People'S Democratic Republic\"\nLATVIA = \"Latvia\"\nLEBANON = \"Lebanon\"\nLESOTHO = \"Lesotho\"\nLIBERIA = \"Liberia\"\nLIBYA = \"Libya\"\nLIECHTENSTEIN = \"Liechtenstein\"\nLITHUANIA = \"Lithuania\"\nLUXEMBOURG = \"Luxembourg\"\nMACAO = \"Macao\"\nMACEDONIA = \"Macedonia\"\nMADAGASCAR = \"Madagascar\"\nMALAWI = \"Malawi\"\nMALAYSIA = \"Malaysia\"\nMALDIVES = \"Maldives\"\nMALI = \"Mali\"\nMALTA = \"Malta\"\nMALVINAS = \"Falkland Islands (Malvinas)\"\nMARSHALL = \"Marshall Islands\"\nMARTINIQUE = \"Martinique\"\nMAURITANIA = \"Mauritania\"\nMAURITIUS = \"Mauritius\"\nMAYOTTE = \"Mayotte\"\nMEXICO = \"Mexico\"\nMICRONESIA = \"Micronesia, Federated States Of\"\nMOLDOVA = \"Moldova, Republic Of\"\nMONACO = \"Monaco\"\nMONGOLIA = \"Mongolia\"\nMONTENEGRO = \"Montenegro\"\nMONTSERRAT = \"Montserrat\"\nMOROCCO = \"Morocco\"\nMOZAMBIQUE = \"Mozambique\"\nMYANMAR = \"Myanmar\"\nNAMIBIA = \"Namibia\"\nNAURU = \"Nauru\"\nNEPAL = \"Nepal\"\nNETHERLANDS = \"Netherlands\"\nNEW_CALEDONIA = \"New Caledonia\"\nNEW_ZEALAND = \"New Zealand\"\nNICARAGUA = \"Nicaragua\"\nNIGER = \"Niger\"\nNIGERIA = \"Nigeria\"\nNIUE = \"Niue\"\nNORFOLK = \"Norfolk Island\"\nNORTH_KOREA = \"Korea, Democratic People'S Republic Of\"\nNORTHERN_MARIANA = \"Northern Mariana Islands\"\nNORWAY = \"Norway\"\nOMAN = \"Oman\"\nPAKISTAN = \"Pakistan\"\nPALAU = \"Palau\"\nPALESTINIAN = \"Palestinian Territory\"\nPANAMA = \"Panama\"\nPAPUA_NEW_GUINEA = \"Papua New Guinea\"\nPARAGUAY = \"Paraguay\"\nPERU = \"Peru\"\nPHILIPPINES = \"Philippines\"\nPITCAIRN = \"Pitcairn\"\nPOLAND = \"Poland\"\nPORTUGAL = \"Portugal\"\nPUERTO_RICO = \"Puerto Rico\"\nQATAR = \"Qatar\"\nRAUNION = \"RAunion\"\nROMANIA = \"Romania\"\nRUSSIA = \"Russian Federation\"\nRWANDA = \"Rwanda\"\nSAINT_BARTHALEMY = \"Saint BarthAlemy\"\nSAINT_HELENA = \"Saint Helena, Ascension And Tristan Da Cunha\"\nSAINT_KITTS = \"Saint Kitts And Nevis\"\nSAINT_LUCIA = \"Saint Lucia\"\nSAINT_MARTIN = \"Saint Martin (French Part)\"\nSAINT_PIERRE = \"Saint Pierre And Miquelon\"\nSAINT_VINCENT = \"Saint Vincent And The Grenadines\"\nSAMOA = \"Samoa\"\nSAN_MARINO = \"San Marino\"\nSAO_TOME_PRINCIPE = \"Sao Tome And Principe\"\nSAUDI_ARABIA = \"Saudi Arabia\"\nSENEGAL = \"Senegal\"\nSERBIA = \"Serbia\"\nSEYCHELLES = \"Seychelles\"\nSIERRA_LEONE = \"Sierra Leone\"\nSINGAPORE = \"Singapore\"\nSINT_MAARTEN = \"Sint Maarten (Dutch Part)\"\nSLOVAKIA = \"Slovakia\"\nSLOVENIA = \"Slovenia\"\nSOLOMON = \"Solomon Islands\"\nSOMALIA = \"Somalia\"\nSOUTH_AFRICA = \"South Africa\"\nSOUTH_GEORGIA = \"South Georgia And The South Sandwich Islands\"\nSOUTH_KOREA = \"Korea, Republic Of\"\nSOUTH_SUDAN = \"South Sudan\"\nSPAIN = \"Spain\"\nSRI_LANKA = \"Sri Lanka\"\nSUDAN = \"Sudan\"\nSURINAME = \"Suriname\"\nSVALBARD = \"Svalbard And Jan Mayen\"\nSWAZILAND = \"Swaziland\"\nSWEDEN = \"Sweden\"\nSWITZERLAND = \"Switzerland\"\nSYRIA = \"Syrian Arab Republic\"\nTAIWAN = \"Taiwan\"\nTAJIKISTAN = \"Tajikistan\"\nTANZANIA = \"Tanzania, United Republic Of\"\nTHAILAND = \"Thailand\"\nTIMOR_LESTE = \"Timor-Leste\"\nTOGO = \"Togo\"\nTOKELAU = \"Tokelau\"\nTONGA = \"Tonga\"\nTRINIDAD_TOBAGO = \"Trinidad And Tobago\"\nTUNISIA = \"Tunisia\"\nTURKEY = \"Turkey\"\nTURKMENISTAN = \"Turkmenistan\"\nTURKS_CAICOS = \"Turks And Caicos Islands\"\nTUVALU = \"Tuvalu\"\nUAE = \"United Arab Emirates\"\nUGANDA = \"Uganda\"\nUK = \"United Kingdom\"\nUKRAINE = \"Ukraine\"\nURUGUAY = \"Uruguay\"\nUSA = \"United States\"\nUSA_ISLANDS = \"United States Minor Outlying Islands\"\nUZBEKISTAN = \"Uzbekistan\"\nVANUATU = \"Vanuatu\"\nVATICAN = \"Holy See (Vatican City State)\"\nVENEZUELA = \"Venezuela, Bolivarian Republic Of\"\nVIETNAM = \"Viet Nam\"\nVIRGIN_BRITISH = \"Virgin Islands, British\"\nVIRGIN_USA = \"Virgin Islands, U.S.\"\nWALLIS_FUTUNA = \"Wallis And Futuna\"\nWESTERN_SAHARA = \"Western Sahara\"\nYEMEN = \"Yemen\"\nZAMBIA = \"Zambia\"\nZIMBABWE = \"Zimbabwe\"\n</code></pre>"},{"location":"enum/#onedep_deposition.enum.Country-attributes","title":"Attributes","text":""},{"location":"enum/#onedep_deposition.enum.Country.AFGHANISTAN","title":"<code>AFGHANISTAN = 'Afghanistan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ALAND","title":"<code>ALAND = 'Aland Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ALBANIA","title":"<code>ALBANIA = 'Albania'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ALGERIA","title":"<code>ALGERIA = 'Algeria'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.AMERICAN_SAMOA","title":"<code>AMERICAN_SAMOA = 'American Samoa'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ANDORRA","title":"<code>ANDORRA = 'Andorra'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ANGOLA","title":"<code>ANGOLA = 'Angola'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ANGUILLA","title":"<code>ANGUILLA = 'Anguilla'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ANTARCTICA","title":"<code>ANTARCTICA = 'Antarctica'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ANTIGUA_BARBUDA","title":"<code>ANTIGUA_BARBUDA = 'Antigua And Barbuda'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ARGENTINA","title":"<code>ARGENTINA = 'Argentina'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ARMENIA","title":"<code>ARMENIA = 'Armenia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ARUBA","title":"<code>ARUBA = 'Aruba'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.AUSTRALIA","title":"<code>AUSTRALIA = 'Australia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.AUSTRIA","title":"<code>AUSTRIA = 'Austria'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.AZERBAIJAN","title":"<code>AZERBAIJAN = 'Azerbaijan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BAHAMAS","title":"<code>BAHAMAS = 'Bahamas'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BAHRAIN","title":"<code>BAHRAIN = 'Bahrain'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BANGLADESH","title":"<code>BANGLADESH = 'Bangladesh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BARBADOS","title":"<code>BARBADOS = 'Barbados'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BELARUS","title":"<code>BELARUS = 'Belarus'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BELGIUM","title":"<code>BELGIUM = 'Belgium'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BELIZE","title":"<code>BELIZE = 'Belize'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BENIN","title":"<code>BENIN = 'Benin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BERMUDA","title":"<code>BERMUDA = 'Bermuda'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BHUTAN","title":"<code>BHUTAN = 'Bhutan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BOLIVIA","title":"<code>BOLIVIA = 'Bolivia, Plurinational State Of'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BONAIRE","title":"<code>BONAIRE = 'Bonaire, Sint Eustatius And Saba'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BOSNIA_HERZEGOVINA","title":"<code>BOSNIA_HERZEGOVINA = 'Bosnia And Herzegovina'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BOTSWANA","title":"<code>BOTSWANA = 'Botswana'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BOUVET","title":"<code>BOUVET = 'Bouvet Island'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BRAZIL","title":"<code>BRAZIL = 'Brazil'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BRUNEI","title":"<code>BRUNEI = 'Brunei Darussalam'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BULGARIA","title":"<code>BULGARIA = 'Bulgaria'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BURKINA_FASO","title":"<code>BURKINA_FASO = 'Burkina Faso'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.BURUNDI","title":"<code>BURUNDI = 'Burundi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CAMBODIA","title":"<code>CAMBODIA = 'Cambodia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CAMEROON","title":"<code>CAMEROON = 'Cameroon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CANADA","title":"<code>CANADA = 'Canada'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CAPE_VERDE","title":"<code>CAPE_VERDE = 'Cape Verde'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CAR","title":"<code>CAR = 'Central African Republic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CAYMAN","title":"<code>CAYMAN = 'Cayman Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CHAD","title":"<code>CHAD = 'Chad'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CHILE","title":"<code>CHILE = 'Chile'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CHINA","title":"<code>CHINA = 'China'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CHRISTMAS","title":"<code>CHRISTMAS = 'Christmas Island'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.COCOS","title":"<code>COCOS = 'Cocos (Keeling) Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.COLOMBIA","title":"<code>COLOMBIA = 'Colombia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.COMOROS","title":"<code>COMOROS = 'Comoros'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CONGO","title":"<code>CONGO = 'Congo'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.COOK","title":"<code>COOK = 'Cook Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.COSTA_RICA","title":"<code>COSTA_RICA = 'Costa Rica'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CROATIA","title":"<code>CROATIA = 'Croatia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CUBA","title":"<code>CUBA = 'Cuba'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CURAAAO","title":"<code>CURAAAO = 'CuraAao'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CYPRUS","title":"<code>CYPRUS = 'Cyprus'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.CZECH_REPUBLIC","title":"<code>CZECH_REPUBLIC = 'Czech Republic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.DENMARK","title":"<code>DENMARK = 'Denmark'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.DJIBOUTI","title":"<code>DJIBOUTI = 'Djibouti'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.DOMINICA","title":"<code>DOMINICA = 'Dominica'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.DOMINICAN_REPUBLIC","title":"<code>DOMINICAN_REPUBLIC = 'Dominican Republic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.DRC","title":"<code>DRC = 'Congo, The Democratic Republic Of The'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ECUADOR","title":"<code>ECUADOR = 'Ecuador'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.EGYPT","title":"<code>EGYPT = 'Egypt'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.EL_SALVADOR","title":"<code>EL_SALVADOR = 'El Salvador'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.EQUATORIAL_GUINEA","title":"<code>EQUATORIAL_GUINEA = 'Equatorial Guinea'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ERITREA","title":"<code>ERITREA = 'Eritrea'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ESTONIA","title":"<code>ESTONIA = 'Estonia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ETHIOPIA","title":"<code>ETHIOPIA = 'Ethiopia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.FAROE","title":"<code>FAROE = 'Faroe Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.FIJI","title":"<code>FIJI = 'Fiji'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.FINLAND","title":"<code>FINLAND = 'Finland'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.FRANCE","title":"<code>FRANCE = 'France'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.FRENCH_GUIANA","title":"<code>FRENCH_GUIANA = 'French Guiana'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.FRENCH_POLYNESIA","title":"<code>FRENCH_POLYNESIA = 'French Polynesia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.FRENCH_SOUTHERN","title":"<code>FRENCH_SOUTHERN = 'French Southern Territories'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GABON","title":"<code>GABON = 'Gabon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GAMBIA","title":"<code>GAMBIA = 'Gambia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GEORGIA","title":"<code>GEORGIA = 'Georgia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GERMANY","title":"<code>GERMANY = 'Germany'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GHANA","title":"<code>GHANA = 'Ghana'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GIBRALTAR","title":"<code>GIBRALTAR = 'Gibraltar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GREECE","title":"<code>GREECE = 'Greece'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GREENLAND","title":"<code>GREENLAND = 'Greenland'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GRENADA","title":"<code>GRENADA = 'Grenada'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GUADELOUPE","title":"<code>GUADELOUPE = 'Guadeloupe'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GUAM","title":"<code>GUAM = 'Guam'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GUATEMALA","title":"<code>GUATEMALA = 'Guatemala'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GUERNSEY","title":"<code>GUERNSEY = 'Guernsey'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GUINEA","title":"<code>GUINEA = 'Guinea'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GUINEA_BISSAU","title":"<code>GUINEA_BISSAU = 'Guinea-Bissau'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.GUYANA","title":"<code>GUYANA = 'Guyana'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.HAITI","title":"<code>HAITI = 'Haiti'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.HEARD_MCDONALD","title":"<code>HEARD_MCDONALD = 'Heard Island And Mcdonald Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.HONDURAS","title":"<code>HONDURAS = 'Honduras'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.HONG_KONG","title":"<code>HONG_KONG = 'Hong Kong'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.HUNGARY","title":"<code>HUNGARY = 'Hungary'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ICELAND","title":"<code>ICELAND = 'Iceland'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.INDIA","title":"<code>INDIA = 'India'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.INDONESIA","title":"<code>INDONESIA = 'Indonesia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.IRAN","title":"<code>IRAN = 'Iran, Islamic Republic Of'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.IRAQ","title":"<code>IRAQ = 'Iraq'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.IRELAND","title":"<code>IRELAND = 'Ireland'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ISLE_OF_MAN","title":"<code>ISLE_OF_MAN = 'Isle Of Man'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ISRAEL","title":"<code>ISRAEL = 'Israel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ITALY","title":"<code>ITALY = 'Italy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.IVORY_COAST","title":"<code>IVORY_COAST = \"CAte D'Ivoire\"</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.JAMAICA","title":"<code>JAMAICA = 'Jamaica'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.JAPAN","title":"<code>JAPAN = 'Japan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.JERSEY","title":"<code>JERSEY = 'Jersey'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.JORDAN","title":"<code>JORDAN = 'Jordan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.KAZAKHSTAN","title":"<code>KAZAKHSTAN = 'Kazakhstan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.KENYA","title":"<code>KENYA = 'Kenya'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.KIRIBATI","title":"<code>KIRIBATI = 'Kiribati'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.KUWAIT","title":"<code>KUWAIT = 'Kuwait'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.KYRGYZSTAN","title":"<code>KYRGYZSTAN = 'Kyrgyzstan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.LAOS","title":"<code>LAOS = \"Lao People'S Democratic Republic\"</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.LATVIA","title":"<code>LATVIA = 'Latvia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.LEBANON","title":"<code>LEBANON = 'Lebanon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.LESOTHO","title":"<code>LESOTHO = 'Lesotho'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.LIBERIA","title":"<code>LIBERIA = 'Liberia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.LIBYA","title":"<code>LIBYA = 'Libya'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.LIECHTENSTEIN","title":"<code>LIECHTENSTEIN = 'Liechtenstein'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.LITHUANIA","title":"<code>LITHUANIA = 'Lithuania'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.LUXEMBOURG","title":"<code>LUXEMBOURG = 'Luxembourg'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MACAO","title":"<code>MACAO = 'Macao'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MACEDONIA","title":"<code>MACEDONIA = 'Macedonia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MADAGASCAR","title":"<code>MADAGASCAR = 'Madagascar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MALAWI","title":"<code>MALAWI = 'Malawi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MALAYSIA","title":"<code>MALAYSIA = 'Malaysia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MALDIVES","title":"<code>MALDIVES = 'Maldives'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MALI","title":"<code>MALI = 'Mali'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MALTA","title":"<code>MALTA = 'Malta'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MALVINAS","title":"<code>MALVINAS = 'Falkland Islands (Malvinas)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MARSHALL","title":"<code>MARSHALL = 'Marshall Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MARTINIQUE","title":"<code>MARTINIQUE = 'Martinique'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MAURITANIA","title":"<code>MAURITANIA = 'Mauritania'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MAURITIUS","title":"<code>MAURITIUS = 'Mauritius'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MAYOTTE","title":"<code>MAYOTTE = 'Mayotte'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MEXICO","title":"<code>MEXICO = 'Mexico'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MICRONESIA","title":"<code>MICRONESIA = 'Micronesia, Federated States Of'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MOLDOVA","title":"<code>MOLDOVA = 'Moldova, Republic Of'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MONACO","title":"<code>MONACO = 'Monaco'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MONGOLIA","title":"<code>MONGOLIA = 'Mongolia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MONTENEGRO","title":"<code>MONTENEGRO = 'Montenegro'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MONTSERRAT","title":"<code>MONTSERRAT = 'Montserrat'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MOROCCO","title":"<code>MOROCCO = 'Morocco'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MOZAMBIQUE","title":"<code>MOZAMBIQUE = 'Mozambique'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.MYANMAR","title":"<code>MYANMAR = 'Myanmar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NAMIBIA","title":"<code>NAMIBIA = 'Namibia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NAURU","title":"<code>NAURU = 'Nauru'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NEPAL","title":"<code>NEPAL = 'Nepal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NETHERLANDS","title":"<code>NETHERLANDS = 'Netherlands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NEW_CALEDONIA","title":"<code>NEW_CALEDONIA = 'New Caledonia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NEW_ZEALAND","title":"<code>NEW_ZEALAND = 'New Zealand'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NICARAGUA","title":"<code>NICARAGUA = 'Nicaragua'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NIGER","title":"<code>NIGER = 'Niger'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NIGERIA","title":"<code>NIGERIA = 'Nigeria'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NIUE","title":"<code>NIUE = 'Niue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NORFOLK","title":"<code>NORFOLK = 'Norfolk Island'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NORTHERN_MARIANA","title":"<code>NORTHERN_MARIANA = 'Northern Mariana Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NORTH_KOREA","title":"<code>NORTH_KOREA = \"Korea, Democratic People'S Republic Of\"</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.NORWAY","title":"<code>NORWAY = 'Norway'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.OMAN","title":"<code>OMAN = 'Oman'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PAKISTAN","title":"<code>PAKISTAN = 'Pakistan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PALAU","title":"<code>PALAU = 'Palau'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PALESTINIAN","title":"<code>PALESTINIAN = 'Palestinian Territory'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PANAMA","title":"<code>PANAMA = 'Panama'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PAPUA_NEW_GUINEA","title":"<code>PAPUA_NEW_GUINEA = 'Papua New Guinea'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PARAGUAY","title":"<code>PARAGUAY = 'Paraguay'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PERU","title":"<code>PERU = 'Peru'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PHILIPPINES","title":"<code>PHILIPPINES = 'Philippines'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PITCAIRN","title":"<code>PITCAIRN = 'Pitcairn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.POLAND","title":"<code>POLAND = 'Poland'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PORTUGAL","title":"<code>PORTUGAL = 'Portugal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.PUERTO_RICO","title":"<code>PUERTO_RICO = 'Puerto Rico'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.QATAR","title":"<code>QATAR = 'Qatar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.RAUNION","title":"<code>RAUNION = 'RAunion'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ROMANIA","title":"<code>ROMANIA = 'Romania'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.RUSSIA","title":"<code>RUSSIA = 'Russian Federation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.RWANDA","title":"<code>RWANDA = 'Rwanda'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAINT_BARTHALEMY","title":"<code>SAINT_BARTHALEMY = 'Saint BarthAlemy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAINT_HELENA","title":"<code>SAINT_HELENA = 'Saint Helena, Ascension And Tristan Da Cunha'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAINT_KITTS","title":"<code>SAINT_KITTS = 'Saint Kitts And Nevis'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAINT_LUCIA","title":"<code>SAINT_LUCIA = 'Saint Lucia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAINT_MARTIN","title":"<code>SAINT_MARTIN = 'Saint Martin (French Part)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAINT_PIERRE","title":"<code>SAINT_PIERRE = 'Saint Pierre And Miquelon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAINT_VINCENT","title":"<code>SAINT_VINCENT = 'Saint Vincent And The Grenadines'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAMOA","title":"<code>SAMOA = 'Samoa'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAN_MARINO","title":"<code>SAN_MARINO = 'San Marino'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAO_TOME_PRINCIPE","title":"<code>SAO_TOME_PRINCIPE = 'Sao Tome And Principe'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SAUDI_ARABIA","title":"<code>SAUDI_ARABIA = 'Saudi Arabia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SENEGAL","title":"<code>SENEGAL = 'Senegal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SERBIA","title":"<code>SERBIA = 'Serbia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SEYCHELLES","title":"<code>SEYCHELLES = 'Seychelles'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SIERRA_LEONE","title":"<code>SIERRA_LEONE = 'Sierra Leone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SINGAPORE","title":"<code>SINGAPORE = 'Singapore'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SINT_MAARTEN","title":"<code>SINT_MAARTEN = 'Sint Maarten (Dutch Part)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SLOVAKIA","title":"<code>SLOVAKIA = 'Slovakia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SLOVENIA","title":"<code>SLOVENIA = 'Slovenia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SOLOMON","title":"<code>SOLOMON = 'Solomon Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SOMALIA","title":"<code>SOMALIA = 'Somalia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SOUTH_AFRICA","title":"<code>SOUTH_AFRICA = 'South Africa'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SOUTH_GEORGIA","title":"<code>SOUTH_GEORGIA = 'South Georgia And The South Sandwich Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SOUTH_KOREA","title":"<code>SOUTH_KOREA = 'Korea, Republic Of'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SOUTH_SUDAN","title":"<code>SOUTH_SUDAN = 'South Sudan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SPAIN","title":"<code>SPAIN = 'Spain'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SRI_LANKA","title":"<code>SRI_LANKA = 'Sri Lanka'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SUDAN","title":"<code>SUDAN = 'Sudan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SURINAME","title":"<code>SURINAME = 'Suriname'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SVALBARD","title":"<code>SVALBARD = 'Svalbard And Jan Mayen'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SWAZILAND","title":"<code>SWAZILAND = 'Swaziland'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SWEDEN","title":"<code>SWEDEN = 'Sweden'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SWITZERLAND","title":"<code>SWITZERLAND = 'Switzerland'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.SYRIA","title":"<code>SYRIA = 'Syrian Arab Republic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TAIWAN","title":"<code>TAIWAN = 'Taiwan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TAJIKISTAN","title":"<code>TAJIKISTAN = 'Tajikistan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TANZANIA","title":"<code>TANZANIA = 'Tanzania, United Republic Of'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.THAILAND","title":"<code>THAILAND = 'Thailand'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TIMOR_LESTE","title":"<code>TIMOR_LESTE = 'Timor-Leste'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TOGO","title":"<code>TOGO = 'Togo'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TOKELAU","title":"<code>TOKELAU = 'Tokelau'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TONGA","title":"<code>TONGA = 'Tonga'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TRINIDAD_TOBAGO","title":"<code>TRINIDAD_TOBAGO = 'Trinidad And Tobago'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TUNISIA","title":"<code>TUNISIA = 'Tunisia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TURKEY","title":"<code>TURKEY = 'Turkey'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TURKMENISTAN","title":"<code>TURKMENISTAN = 'Turkmenistan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TURKS_CAICOS","title":"<code>TURKS_CAICOS = 'Turks And Caicos Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.TUVALU","title":"<code>TUVALU = 'Tuvalu'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.UAE","title":"<code>UAE = 'United Arab Emirates'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.UGANDA","title":"<code>UGANDA = 'Uganda'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.UK","title":"<code>UK = 'United Kingdom'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.UKRAINE","title":"<code>UKRAINE = 'Ukraine'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.URUGUAY","title":"<code>URUGUAY = 'Uruguay'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.USA","title":"<code>USA = 'United States'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.USA_ISLANDS","title":"<code>USA_ISLANDS = 'United States Minor Outlying Islands'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.UZBEKISTAN","title":"<code>UZBEKISTAN = 'Uzbekistan'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.VANUATU","title":"<code>VANUATU = 'Vanuatu'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.VATICAN","title":"<code>VATICAN = 'Holy See (Vatican City State)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.VENEZUELA","title":"<code>VENEZUELA = 'Venezuela, Bolivarian Republic Of'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.VIETNAM","title":"<code>VIETNAM = 'Viet Nam'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.VIRGIN_BRITISH","title":"<code>VIRGIN_BRITISH = 'Virgin Islands, British'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.VIRGIN_USA","title":"<code>VIRGIN_USA = 'Virgin Islands, U.S.'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.WALLIS_FUTUNA","title":"<code>WALLIS_FUTUNA = 'Wallis And Futuna'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.WESTERN_SAHARA","title":"<code>WESTERN_SAHARA = 'Western Sahara'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.YEMEN","title":"<code>YEMEN = 'Yemen'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ZAMBIA","title":"<code>ZAMBIA = 'Zambia'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Country.ZIMBABWE","title":"<code>ZIMBABWE = 'Zimbabwe'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.EMSubType","title":"<code>EMSubType</code>","text":"Source code in <code>onedep_deposition/enum.py</code> <pre><code>class EMSubType(enum.Enum):\nHELICAL = \"helical\"\nSPA = \"single\"\nSUBTOMOGRAM = \"subtomogram\"\nTOMOGRAPHY = \"tomography\"\n</code></pre>"},{"location":"enum/#onedep_deposition.enum.EMSubType-attributes","title":"Attributes","text":""},{"location":"enum/#onedep_deposition.enum.EMSubType.HELICAL","title":"<code>HELICAL = 'helical'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.EMSubType.SPA","title":"<code>SPA = 'single'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.EMSubType.SUBTOMOGRAM","title":"<code>SUBTOMOGRAM = 'subtomogram'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.EMSubType.TOMOGRAPHY","title":"<code>TOMOGRAPHY = 'tomography'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.ExperimentType","title":"<code>ExperimentType</code>","text":"Source code in <code>onedep_deposition/enum.py</code> <pre><code>class ExperimentType(enum.Enum):\nXRAY = 'xray'\nFIBER = 'fiber'\nNEUTRON = 'neutron'\nEM = 'em'\nEC = 'ec'\nNMR = 'nmr'\nSSNMR = 'ssnmr'\n</code></pre>"},{"location":"enum/#onedep_deposition.enum.ExperimentType-attributes","title":"Attributes","text":""},{"location":"enum/#onedep_deposition.enum.ExperimentType.EC","title":"<code>EC = 'ec'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.ExperimentType.EM","title":"<code>EM = 'em'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.ExperimentType.FIBER","title":"<code>FIBER = 'fiber'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.ExperimentType.NEUTRON","title":"<code>NEUTRON = 'neutron'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.ExperimentType.NMR","title":"<code>NMR = 'nmr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.ExperimentType.SSNMR","title":"<code>SSNMR = 'ssnmr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.ExperimentType.XRAY","title":"<code>XRAY = 'xray'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType","title":"<code>FileType</code>","text":"Source code in <code>onedep_deposition/enum.py</code> <pre><code>class FileType(enum.Enum):\nLAYER = \"layer-lines\"\nFSC_XML = \"fsc-xml\"\nPDB_COORD = \"co-pdb\"\nMMCIF_COORD = \"co-cif\"\nEM_MAP = \"vo-map\"\nENTRY_IMAGE = \"img-emdb\"\nEM_ADDITIONAL_MAP = \"add-map\"\nEM_MASK = \"mask-map\"\nEM_HALF_MAP = \"half-map\"\nCRYSTAL_STRUC_FACTORS = \"xs-cif\"\nCRYSTAL_MTZ = \"xs-mtz\"\nCRYSTAL_PARAMETER = \"xa-par\"\nCRYSTAL_TOPOLOGY = \"xa-top\"\nVIRUS_MATRIX = \"xa-mat\"\nNMR_ACS = \"nm-shi\"\nNMR_RESTRAINT_AMBER = \"nm-res-amb\"\nNMR_TOPOLOGY_AMBER = \"nm-aux-amb\"\nNMR_RESTRAINT_BIOSYM = \"nm-res-bio\"\nNMR_RESTRAINT_CHARMM = \"nm-res-cha\"\nNMR_RESTRAINT_CNS = \"nm-res-cns\"\nNMR_RESTRAINT_CYANA = \"nm-res-cya\"\nNMR_RESTRAINT_DYNAMO = \"nm-res-dyn\"\nNMR_RESTRAINT_PALES = \"nm-res-dyn\"\nNMR_RESTRAINT_TALOS = \"nm-res-dyn\"\nNMR_RESTRAINT_GROMACS = \"nm-res-gro\"\nNMR_TOPOLOGY_GROMACS = \"nm-aux-gro\"\nNMR_RESTRAINT_ISD = \"nm-res-isd\"\nNMR_RESTRAINT_ROSETTA = \"nm-res-ros\"\nNMR_RESTRAINT_SYBYL = \"nm-res-syb\"\nNMR_RESTRAINT_XPLOR = \"nm-res-xpl\"\nNMR_RESTRAINT_OTHER = \"nm-res-oth\"\nNMR_SPECTRAL_PEAK = \"nm-pea-any\"\nNMR_UNIFIED_NEF = \"nm-uni-nef\"\nNMR_UNIFIED_STAR = \"nm-uni-str\"\n</code></pre>"},{"location":"enum/#onedep_deposition.enum.FileType-attributes","title":"Attributes","text":""},{"location":"enum/#onedep_deposition.enum.FileType.CRYSTAL_MTZ","title":"<code>CRYSTAL_MTZ = 'xs-mtz'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.CRYSTAL_PARAMETER","title":"<code>CRYSTAL_PARAMETER = 'xa-par'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.CRYSTAL_STRUC_FACTORS","title":"<code>CRYSTAL_STRUC_FACTORS = 'xs-cif'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.CRYSTAL_TOPOLOGY","title":"<code>CRYSTAL_TOPOLOGY = 'xa-top'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.EM_ADDITIONAL_MAP","title":"<code>EM_ADDITIONAL_MAP = 'add-map'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.EM_HALF_MAP","title":"<code>EM_HALF_MAP = 'half-map'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.EM_MAP","title":"<code>EM_MAP = 'vo-map'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.EM_MASK","title":"<code>EM_MASK = 'mask-map'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.ENTRY_IMAGE","title":"<code>ENTRY_IMAGE = 'img-emdb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.FSC_XML","title":"<code>FSC_XML = 'fsc-xml'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.LAYER","title":"<code>LAYER = 'layer-lines'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.MMCIF_COORD","title":"<code>MMCIF_COORD = 'co-cif'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_ACS","title":"<code>NMR_ACS = 'nm-shi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_AMBER","title":"<code>NMR_RESTRAINT_AMBER = 'nm-res-amb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_BIOSYM","title":"<code>NMR_RESTRAINT_BIOSYM = 'nm-res-bio'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_CHARMM","title":"<code>NMR_RESTRAINT_CHARMM = 'nm-res-cha'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_CNS","title":"<code>NMR_RESTRAINT_CNS = 'nm-res-cns'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_CYANA","title":"<code>NMR_RESTRAINT_CYANA = 'nm-res-cya'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_DYNAMO","title":"<code>NMR_RESTRAINT_DYNAMO = 'nm-res-dyn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_GROMACS","title":"<code>NMR_RESTRAINT_GROMACS = 'nm-res-gro'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_ISD","title":"<code>NMR_RESTRAINT_ISD = 'nm-res-isd'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_OTHER","title":"<code>NMR_RESTRAINT_OTHER = 'nm-res-oth'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_PALES","title":"<code>NMR_RESTRAINT_PALES = 'nm-res-dyn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_ROSETTA","title":"<code>NMR_RESTRAINT_ROSETTA = 'nm-res-ros'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_SYBYL","title":"<code>NMR_RESTRAINT_SYBYL = 'nm-res-syb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_TALOS","title":"<code>NMR_RESTRAINT_TALOS = 'nm-res-dyn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_RESTRAINT_XPLOR","title":"<code>NMR_RESTRAINT_XPLOR = 'nm-res-xpl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_SPECTRAL_PEAK","title":"<code>NMR_SPECTRAL_PEAK = 'nm-pea-any'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_TOPOLOGY_AMBER","title":"<code>NMR_TOPOLOGY_AMBER = 'nm-aux-amb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_TOPOLOGY_GROMACS","title":"<code>NMR_TOPOLOGY_GROMACS = 'nm-aux-gro'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_UNIFIED_NEF","title":"<code>NMR_UNIFIED_NEF = 'nm-uni-nef'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.NMR_UNIFIED_STAR","title":"<code>NMR_UNIFIED_STAR = 'nm-uni-str'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.PDB_COORD","title":"<code>PDB_COORD = 'co-pdb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.FileType.VIRUS_MATRIX","title":"<code>VIRUS_MATRIX = 'xa-mat'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status","title":"<code>Status</code>","text":"Source code in <code>onedep_deposition/enum.py</code> <pre><code>class Status(enum.Enum):\nDEP = '1'\nPROC = '2'\nAUTH = '3'\nREPL = '4'\nAUCO = '5'\nAUXS = '6'\nAUXU = '7'\nHOLD = '8'\nHPUB = '9'\nOBS = '10'\nPOLC = '11'\nREL = '12'\nREUP = '13'\nWAIT = '14'\nWDRN = '15'\n</code></pre>"},{"location":"enum/#onedep_deposition.enum.Status-attributes","title":"Attributes","text":""},{"location":"enum/#onedep_deposition.enum.Status.AUCO","title":"<code>AUCO = '5'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.AUTH","title":"<code>AUTH = '3'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.AUXS","title":"<code>AUXS = '6'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.AUXU","title":"<code>AUXU = '7'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.DEP","title":"<code>DEP = '1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.HOLD","title":"<code>HOLD = '8'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.HPUB","title":"<code>HPUB = '9'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.OBS","title":"<code>OBS = '10'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.POLC","title":"<code>POLC = '11'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.PROC","title":"<code>PROC = '2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.REL","title":"<code>REL = '12'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.REPL","title":"<code>REPL = '4'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.REUP","title":"<code>REUP = '13'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.WAIT","title":"<code>WAIT = '14'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"enum/#onedep_deposition.enum.Status.WDRN","title":"<code>WDRN = '15'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""}]}